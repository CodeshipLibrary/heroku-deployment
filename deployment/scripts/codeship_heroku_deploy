#!/bin/bash
set -e
set -o pipefail

PREVIOUS_WORKING_DIRECTORY="${PWD}"

CODESHIP_HEROKU_APP_NAME=${CODESHIP_HEROKU_APP_NAME:-""}
CODESHIP_HEROKU_API_KEY=${CODESHIP_HEROKU_API_KEY:-""}
CODESHIP_HEROKU_DEPLOY_FOLDER=${CODESHIP_HEROKU_DEPLOY_FOLDER:-"${PWD}"}
CODESHIP_HEROKU_POST_DEPLOY_COMMAND=${CODESHIP_HEROKU_POST_DEPLOY_COMMAND:-""}
CODESHIP_HEROKU_URL=${CODESHIP_HEROKU_URL:-""}
CODESHIP_HEROKU_CHECK_APP_URL=${CODESHIP_HEROKU_CHECK_APP_URL:-false}
CODESHIP_HEROKU_CLEAN_DEPLOY=${CODESHIP_HEROKU_CLEAN_DEPLOY:-false}

SCRIPT_DIRECTORY="$( cd "$(dirname "$0")" ; pwd -P )"

function help {
  cat << EOF
codeship_heroku_deploy Usage:
--

required:
-N or CODESHIP_HEROKU_APP_NAME: heroku app name
-K or CODESHIP_HEROKU_API_KEY: heroku API key

optional:
-f or CODESHIP_HEROKU_DEPLOY_FOLDER: folder to deploy
-d or CODESHIP_HEROKU_POST_DEPLOY_COMMAND: one-off command to run after deployment
-u or CODESHIP_HEROKU_URL: url running the service (to use in conjunction with -c)
-c or CODESHIP_HEROKU_CHECK_APP_URL: check url if service is running after deployment [true/false]
-C or CODESHIP_HEROKU_CLEAN_DEPLOY: get checkout folder back into committed state before deployment [true/false]
-h: this

EOF
}

function check_url {
  local tries=6
  local status=0
  local wait=10
  local cmd="wget --no-check-certificate --output-document=/dev/null ${1}"

  sleep ${wait}

  for (( i = 1; i <=${tries}; i++ )); do
    echo -e "\e[0;36mTrying ($i of ${tries}) '${cmd}'\e[0m"
    ${cmd}
    status=$?

    if [ ${status} -eq 0 ]; then
      break
    fi

    if [ ${status} -eq 5 ]; then
      echo -e "\e[0;33mCheck failed because of an error validating the SSL certificate.\e[0m"
      echo -e "\e[0;33mWe will retry without checking the certificate, but this behaviour will change in the future!\e[0m"
      cmd="${original_cmd}"
      status=0
    fi

    if [ $i -lt ${tries} ]; then
      echo -e "\e[0;36mWaiting ${wait} seconds before trying again.\e[0m"
      echo "------------------------------------------------------------------------------------------------------"
      sleep "${wait}"
    fi
  done

  return ${status}
}

while getopts "N:K:f:u:d:chC" opt; do
  case "$opt" in
    N)
      CODESHIP_HEROKU_APP_NAME="$OPTARG"; ;;
    K)
      CODESHIP_HEROKU_API_KEY="$OPTARG"; ;;
    f)
      CODESHIP_HEROKU_DEPLOY_FOLDER="$OPTARG"; ;;
    d)
      CODESHIP_HEROKU_POST_DEPLOY_COMMAND="$OPTARG"; ;;
    u)
      CODESHIP_HEROKU_URL="$OPTARG"; ;;
    c)
      CODESHIP_HEROKU_CHECK_APP_URL=true; ;;
    C)
      CODESHIP_HEROKU_CLEAN_DEPLOY=true ;;
    h) help; exit 0 ;;
    *)
      help
      exit 1 ;;
  esac
done

#input validation
if [ "${CODESHIP_HEROKU_APP_NAME}" == "" ]; then
  echo "app-name not set, exiting" >&2
  help
  exit 1
fi

#input validation
if [ "${CODESHIP_HEROKU_API_KEY}" == "" ]; then
  echo "api-key not set, exiting" >&2
  help
  exit 1
fi

trap 'echo error executing "$BASH_COMMAND" in line $LINENO' ERR

if [ "${CODESHIP_HEROKU_DEPLOY_FOLDER}" != "${PWD}" ]; then
  echo "Changing directory to ${CODESHIP_HEROKU_DEPLOY_FOLDER}"
  cd "${CODESHIP_HEROKU_DEPLOY_FOLDER}"
fi

if ! HEROKU_API_KEY=$CODESHIP_HEROKU_API_KEY "${SCRIPT_DIRECTORY}/codeship_heroku_check_access" "${CODESHIP_HEROKU_APP_NAME}"; then
  echo "could not access heroku app ${CODESHIP_HEROKU_APP_NAME}, exiting" >&2
  exit 1
fi

if [ "${CODESHIP_HEROKU_CLEAN_DEPLOY}" == "true" ]; then
  git reset --hard HEAD
  git clean -f
fi

# remove .bundle/config before packaging files for deployment so heroku-buildpack-ruby doesn't fail 
rm -rf .bundle/

HEROKU_API_KEY=${CODESHIP_HEROKU_API_KEY} heroku builds:create -a "${CODESHIP_HEROKU_APP_NAME}" --version "${CI_COMMIT_ID}"

if [ "${CODESHIP_HEROKU_POST_DEPLOY_COMMAND}" != "" ]; then
  HEROKU_API_KEY=$CODESHIP_HEROKU_API_KEY "${SCRIPT_DIRECTORY}/codeship_heroku_run" "${CODESHIP_HEROKU_POST_DEPLOY_COMMAND}" "${CODESHIP_HEROKU_APP_NAME}"
fi

if [ "${CODESHIP_HEROKU_CHECK_APP_URL}" == "true" ]; then
  URL="${CODESHIP_HEROKU_URL:-"http://${CODESHIP_HEROKU_APP_NAME}.herokuapp.com"}"
  check_url "${URL}"
fi

cd "${PREVIOUS_WORKING_DIRECTORY}"
